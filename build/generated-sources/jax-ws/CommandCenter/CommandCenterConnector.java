
package CommandCenter;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CommandCenterConnector", targetNamespace = "http://services.licensing.business.s3systems.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CommandCenterConnector {


    /**
     * 
     * @param tenantDomainName
     * @param applicationSystemID
     * @return
     *     returns CommandCenter.BusinessTenantDTO
     * @throws TenantNotFoundException_Exception
     * @throws ApplicationNotFoundException_Exception
     * @throws TransactionsExceededException_Exception
     * @throws LicenseNotYetActivatedException_Exception
     * @throws LicenseExpiredException_Exception
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "validateTenantLicenseForLogin", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicenseForLogin")
    @ResponseWrapper(localName = "validateTenantLicenseForLoginResponse", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicenseForLoginResponse")
    @Action(input = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLoginRequest", output = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLoginResponse", fault = {
        @FaultAction(className = LicenseNotYetActivatedException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/LicenseNotYetActivatedException"),
        @FaultAction(className = LicenseExpiredException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/LicenseExpiredException"),
        @FaultAction(className = TenantNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/TenantNotFoundException"),
        @FaultAction(className = ApplicationNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/ApplicationNotFoundException"),
        @FaultAction(className = TransactionsExceededException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/TransactionsExceededException"),
        @FaultAction(className = Exception_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForLogin/Fault/Exception")
    })
    public BusinessTenantDTO validateTenantLicenseForLogin(
        @WebParam(name = "tenantDomainName", targetNamespace = "")
        String tenantDomainName,
        @WebParam(name = "applicationSystemID", targetNamespace = "")
        long applicationSystemID)
        throws ApplicationNotFoundException_Exception, Exception_Exception, LicenseExpiredException_Exception, LicenseNotYetActivatedException_Exception, TenantNotFoundException_Exception, TransactionsExceededException_Exception
    ;

    /**
     * 
     * @param tenantDomainName
     * @return
     *     returns CommandCenter.BusinessTenantDTO
     * @throws TenantNotFoundException_Exception
     * @throws ApplicationNotFoundException_Exception
     * @throws TransactionsExceededException_Exception
     * @throws LicenseNotYetActivatedException_Exception
     * @throws LicenseExpiredException_Exception
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "validateTenantLicensesForLogin", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicensesForLogin")
    @ResponseWrapper(localName = "validateTenantLicensesForLoginResponse", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicensesForLoginResponse")
    @Action(input = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLoginRequest", output = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLoginResponse", fault = {
        @FaultAction(className = LicenseNotYetActivatedException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/LicenseNotYetActivatedException"),
        @FaultAction(className = LicenseExpiredException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/LicenseExpiredException"),
        @FaultAction(className = TenantNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/TenantNotFoundException"),
        @FaultAction(className = ApplicationNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/ApplicationNotFoundException"),
        @FaultAction(className = TransactionsExceededException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/TransactionsExceededException"),
        @FaultAction(className = Exception_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicensesForLogin/Fault/Exception")
    })
    public BusinessTenantDTO validateTenantLicensesForLogin(
        @WebParam(name = "tenantDomainName", targetNamespace = "")
        String tenantDomainName)
        throws ApplicationNotFoundException_Exception, Exception_Exception, LicenseExpiredException_Exception, LicenseNotYetActivatedException_Exception, TenantNotFoundException_Exception, TransactionsExceededException_Exception
    ;

    /**
     * 
     * @param tenantDomainName
     * @param applicationSystemID
     * @return
     *     returns CommandCenter.BusinessTenantDTO
     * @throws TenantNotFoundException_Exception
     * @throws ApplicationNotFoundException_Exception
     * @throws TransactionsExceededException_Exception
     * @throws LicenseNotYetActivatedException_Exception
     * @throws LicenseExpiredException_Exception
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "validateTenantLicenseForUserCreate", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicenseForUserCreate")
    @ResponseWrapper(localName = "validateTenantLicenseForUserCreateResponse", targetNamespace = "http://services.licensing.business.s3systems.com/", className = "CommandCenter.ValidateTenantLicenseForUserCreateResponse")
    @Action(input = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreateRequest", output = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreateResponse", fault = {
        @FaultAction(className = LicenseNotYetActivatedException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/LicenseNotYetActivatedException"),
        @FaultAction(className = LicenseExpiredException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/LicenseExpiredException"),
        @FaultAction(className = TenantNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/TenantNotFoundException"),
        @FaultAction(className = ApplicationNotFoundException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/ApplicationNotFoundException"),
        @FaultAction(className = TransactionsExceededException_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/TransactionsExceededException"),
        @FaultAction(className = Exception_Exception.class, value = "http://services.licensing.business.s3systems.com/CommandCenterConnector/validateTenantLicenseForUserCreate/Fault/Exception")
    })
    public BusinessTenantDTO validateTenantLicenseForUserCreate(
        @WebParam(name = "tenantDomainName", targetNamespace = "")
        String tenantDomainName,
        @WebParam(name = "applicationSystemID", targetNamespace = "")
        long applicationSystemID)
        throws ApplicationNotFoundException_Exception, Exception_Exception, LicenseExpiredException_Exception, LicenseNotYetActivatedException_Exception, TenantNotFoundException_Exception, TransactionsExceededException_Exception
    ;

}
